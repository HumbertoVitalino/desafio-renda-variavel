services:
  db:
    image: mysql:8.0
    container_name: db_invest_rv
    command: --default-authentication-plugin=mysql_native_password
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: '!1234567'
      MYSQL_DATABASE: investimentos_rv
    ports:
      - "3307:3306"
    volumes:
      - db-data:/var/lib/mysql
      - ./Sql:/docker-entrypoint-initdb.d
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", "-u", "root", "-p!1234567"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'cub zk-ready zookeeper:2181 120']
      interval: 10s
      timeout: 10s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "cub kafka-ready -b kafka:29092 1 120"]
      interval: 15s
      timeout: 10s
      retries: 5

  api:
    container_name: api
    build:
      context: .
      dockerfile: InvestimentosRV/Api/Dockerfile
    ports:
      - "5000:8080"
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy

  quote-producer:
    container_name: quote-producer
    build:
      context: .
      dockerfile: QuoteProducer/QuoteProducer.Console/Dockerfile
    networks:
      - app-network
    depends_on:
      kafka:
        condition: service_healthy

  quote-consumer:
    container_name: quote-consumer
    build:
      context: .
      dockerfile: QuoteConsumer/QuoteConsumer.Worker/Dockerfile
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy

networks:
  app-network:
    driver: bridge

volumes:
  db-data: