// <auto-generated />
using System;
using Infra.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infra.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250606143145_AddInvestorProfileAndAssetRisk")]
    partial class AddInvestorProfileAndAssetRisk
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Core.Domain.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_ativo");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_criacao");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome_ativo");

                    b.Property<int>("Risk")
                        .HasColumnType("int")
                        .HasColumnName("risco_ativo");

                    b.Property<string>("TickerSymbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("codigo_ativo");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_atualizacao");

                    b.HasKey("Id");

                    b.HasIndex("TickerSymbol")
                        .IsUnique();

                    b.ToTable("ativos", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_operacao");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetId")
                        .HasColumnType("int")
                        .HasColumnName("id_ativo");

                    b.Property<decimal>("BrokerageFee")
                        .HasColumnType("decimal(18, 8)")
                        .HasColumnName("valor_corretagem");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_hora_operacao");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantidade");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("tipo_operacao");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 8)")
                        .HasColumnName("preco_unitario");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_atualizacao");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("UserId", "AssetId", "DateTime")
                        .HasDatabaseName("ix_operacoes_usuario_ativo_data");

                    b.ToTable("operacoes", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_posicao");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetId")
                        .HasColumnType("int")
                        .HasColumnName("id_ativo");

                    b.Property<decimal>("AveragePrice")
                        .HasColumnType("decimal(18, 8)")
                        .HasColumnName("preco_medio");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_criacao");

                    b.Property<decimal>("ProfitAndLoss")
                        .HasColumnType("decimal(18, 8)")
                        .HasColumnName("lucro_prejuizo_atual");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantidade");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_atualizacao");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("UserId", "AssetId")
                        .IsUnique();

                    b.ToTable("posicoes", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Quote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_cotacao");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetId")
                        .HasColumnType("int")
                        .HasColumnName("id_ativo");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_hora_cotacao");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 8)")
                        .HasColumnName("preco_unitario");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_atualizacao");

                    b.HasKey("Id");

                    b.HasIndex("AssetId", "DateTime")
                        .IsUnique();

                    b.ToTable("cotacoes", (string)null);
                });

            modelBuilder.Entity("Core.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BrokerageRate")
                        .HasColumnType("decimal(5, 4)")
                        .HasColumnName("taxa_corretagem");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_criacao");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob")
                        .HasColumnName("senha_hash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob")
                        .HasColumnName("senha_salt");

                    b.Property<int>("Profile")
                        .HasColumnType("int")
                        .HasColumnName("perfil_investidor");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_atualizacao");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("usuarios", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Operation", b =>
                {
                    b.HasOne("Core.Domain.Asset", "Asset")
                        .WithMany("Operations")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.User", "User")
                        .WithMany("Operations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Domain.Position", b =>
                {
                    b.HasOne("Core.Domain.Asset", "Asset")
                        .WithMany("Positions")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.User", "User")
                        .WithMany("Positions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Domain.Quote", b =>
                {
                    b.HasOne("Core.Domain.Asset", "Asset")
                        .WithMany("Quotes")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("Core.Domain.Asset", b =>
                {
                    b.Navigation("Operations");

                    b.Navigation("Positions");

                    b.Navigation("Quotes");
                });

            modelBuilder.Entity("Core.Domain.User", b =>
                {
                    b.Navigation("Operations");

                    b.Navigation("Positions");
                });
#pragma warning restore 612, 618
        }
    }
}
